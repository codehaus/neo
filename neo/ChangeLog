2005-05-23 arjen

    * VsTool can now be registered again. See NEO-27 
	(http://jira.codehaus.org/browse/NEO-27) for details.

2005-05-20 erik

    * Added Ben's code that enables support for default values. See
    NEO-28 (http://jira.codehaus.org/browse/NEO-28) for details.


2005-05-18 erik

	* Fixed NEO-26. It was actually fixed but there was some confusion
	whether the solution covered all relevant cases.
	

2005-04-27 erik

	* Fixed NEO-25. Qualifier format strings can now contains properties
	that start with or contain underscores.
	
	* Fixed one of two cases of NEO-26. Rejecting the delete of a fetched
	object now reinserts it into the context's tables.
	

2005-04-15 arjen

	* Added MySQL data store.
	

2005-04-05 arjen

	* Fixed NEO-23. Oracle table names can now delimited using double quotes.
	When constructing a DbDataStore, you can specify a flag which indicates
	whether to use delimiters or not. The SqlClient datastore now uses square
	brackets as delimiters.

	* Updated to nunit 2.2.


2005-04-02 erik

   * Fixed NEO-6. Updates for DB generated primary keys now propagate
   as expected.


2005-03-21 erik

    * Added Johannes's extension that allows observers to register for
    change events on the entity objects. This allows for improved
    binding support but MAY have a negative effect on performance when
    thousands of objects are changed quickly. If you have issues please
    contact the mailing lists.


2005-03-17 arjen

	* Added Neo NAnt task that replicates the behavior of the commandline 
	tool. To use it, simply place the Neo.NAntTasks.dll in your NAnt bin
	directory.


2005-03-16 arjen

	* Added GlobalAssemblyInfo.cs file, which is used throughout all 
	projects. Assembly-specific attributes are still supported through 
	the normal AssemblyInfo.cs.
	
	* Refactored the command line tool to use Mono.GetOptions library.
	

2005-03-10 arjen

	* Fixed NEO-20: upgraded log4net to 1.2.0 beta 8, and upgraded NVelocity to 0.4.2.
	

2004-03-03 erik

	* Added Bruce's file check to the CodeGen adapter. Now we only
	add project items if they are not already in the project.
	
	* Made the ordering of entities as returned by the MetaModel
	classes predictable, they occur in the same order as they are
	defined in the model file.

	* Changed ObjectCollections so that they signal that their 
	objects are editable. This should be okay even though the
	EntityObjects do not implement the IEditableObject API.




RELEASE 1.3.1
----------------------------------------------------------------

2004-01-27 erik (proxy)

	* Added Arjen's XsdReader which allows to define the Neo schema
	using XSD rather than the Norque format.


2004-01-26 erik

	* Added null keyword support in qualifier formats and cleaned up
	some fixtures.
	
	* Added support for defining a default namespace from the command 
	line.


2004-11-11 erik (proxy)

	* Merged in changes from a forked Neo version. There are few
	changes to the public API, mainly around IEntityMaps, but several
	internal improvements, which among other things fix NEO-3 and 
	NEO-15.
	
	* Improved code generation templates. Note that an exception is now
	thrown when objects from different contexts are assigned. (This was 
	always unsupported but could sometimes go undetected.) Also, the 
	new templates contain a performance improvement for object creation
	that requires the entity objects to have a 'protected internal'
	constructor. Existing classes must be updated manually.


2004-11-04 erik

	* Updated inline comments and added task to produce compiled
	help file to NAnt script.




RELEASE 1.3.0
----------------------------------------------------------------

2004-10-25 erik

    * Added Arjen's PK initialiser for Guids as strings.
    

2004-10-22 erik

    * Added Johannes's Firebird data store. This is now implemented 
    in a separate project which is part of the new overall solution. 
    
    * The Oracle data store has also been moved from the main 
    assembly.
    
    * Tests now by default run against an embedded version of 
    Firebird which means that no external database is required in
    order to run all the tests.
    

2004-10-18 erik

    * Added a new feature to ObjectContext. It now does not go to
    a datastore if it has previously brought all objects of the entity in
    question into memory.
    
    * Some small bugfixes.


2004-10-14 erik

	* Improved qualifier parser error reporting.


2004-10-11 jim

    * Moved object instantiation into entity map so that it can be
    overridden. The updated templates in the test suite show how
    to improve object generation performance.


2004-10-06 erik

    * Added Dave's algorithm to sort tables for insert/update and
    moved the code from the datastore to a separate helper class.


2004-10-05 erik & jim

    * ObjectContext now creates objects for deleted rows that are 
    merged in. It also uses the same entity map factory as its parent
    context.
    
    * Added a case-insensitive string predicate but this only works in
    the databases if they are configured to do case-insensitive string
    comparisons.
        

2004-09-29 erik

    * Thanks to a tip from Christoffer Skjoldborg I found out how to 
    add items to a project from a custom tool; and this means that the
    VS.NET tool now automatically adds classes for new entities.


2004-09-28 erik

    * Added new virtual method to create CommandBuilders to 
    DbDataStore so that concrete stores have a single place to 
    customise the builder. SqlStore uses this to allow for selective
    use of delimited identifiers. Also made more methods virtual.
    

2004-09-24 erik

    * Added new SingleAssemblyEntityMap factory submitted by
    Dave Spring and created an abstract base class that makes it
    easier to write custom map factories.
    
    * Added blank alongside underscore as a word seperator for 
    camelcasing.
    
    * Added FLOAT data type mapping.
    



RELEASE 1.2.3
----------------------------------------------------------------

2004-09-16 erik

	* Bugfixes. NotEqual tests against database work again (NEO-12)
	and queries with sorting but no limit work now. Also added two
	fixes reported by Dave Spring on the mailing list.
	

2004-09-06 erik

	* Changed NULL checks in SQL writer to be SQL92 compliant.


2004-08-20 erik

	* Removed colon as command/option separator from command line
	tool. This was required to allow for absolute paths.
	
	* Fixed some bugs related to db generated keys.
	



RELEASE 1.2.2
----------------------------------------------------------------

2004-08-16 erik

	* Added slightly modified version of Dave's code to write
	delimited identifiers.
	
	* Fixes for bugs NEO-4, NEO-7 and NEO-8.


2004-07-26 erik (proxy)

	* Added Johannes's code for IBindingList support. Due to a conflict
	with Jim's recent additions ObjectRelations currently do not send
	change events for objects contained in them. (This never worked for
	ObjectLists.) There is an ignored test.


2004-07-20 erik (proxy)

	* Added Jim's code to broker change events. This improves
	performance, makes it easier to add custom listerners and somehow
	solves a long standing bug with propagating updates of relations
	from child contexts.


2004-06-17 erik

	* Made ObjectContext and DbDataStore serialisable. This means
	that it is now possible to hold an ObjectContext in an ASP.NET
	session. Watch out for data set size and serialisation of
	database passwords, though.


2004-06-16 erik

	* Refactored the tools solution. The neo generator can now 
	apply a Velocity template to the entire model which made it 
	easy to write a Velocity template that creates the SQL schema. 
	The XSL-based approach is still supported but discouraged. 




RELEASE 1.2.1
----------------------------------------------------------------

2004-06-11 erik

	* Added feature to ObjectContext to delay loading from
	parent context. Fixed several bugs related to db generated
	keys.


2004-06-10 erik

	* Further refactored the data store base implementations and 
	added Arjen's code for Microsoft's Oracle data provider.
	

2004-06-03 erik

	* Added simple support for retrieving sorted fetch results.
	At the moment sorting is limited to attributes, not paths, and
	the in-memory implementation is further limited to sorting by 
	one attribute. Note that the IFetchSpecification interface has
	been extended which means that the support vtl needs a change.


2004-06-02 erik

	* Clean up and refactorings. Moved qualifiers and parser into
	separate namespaces, moved some inline classes into their own
	source files, refactored parser and sqlstore classes into more
	managable classes, added database namespace that holds 
	code not specific to SQL Server.
	



RELEASE 1.2.0
----------------------------------------------------------------

2004-06-01 erik

	* Added support for bracketing expressions in qualifier formats
	to define precedence. The parser will not create groupings among
	qualifiers with the same conjunctor because this does not change
	evaluation, i.e. (a and (b and c)) becomes (a and b and c)


2004-05-28 erik

	* Added support for like, greater or equal and less or equal
	operators on qualifiers; using Urmo's regex solution for the
	evaluation of like in memory, Conversion from query dictionaries
	will create a like predicate if a string contains a '%'.
	
	* Added predicates for string startsWith, endsWith and cntains
	operations. There is no parser or sql support for these, though.


2004-05-27 erik

	* Refactored ClauseQualifier. Rather than using an enum to 
	determine the type (and/or), it now has two subclasses that
	do the same, i.e. replace conditional with polymorphism.
	
	* Refactored PropertyQualifier and ColumnQualifier. Rather
	than using an enum to specify the operator, it now uses a
	new class hierarchy to express predicates. This should make
	it much easier to add new predicates such as 'like'.
	

2004-05-06 erik (proxy)

	* Added Arjen's fix for querying for NULL values.
	

2004-03-30 erik (proxy)

	* Added Jim's code to order insert and delete operations so that
	constraints between parent and child tables are never violated.

	* Added handling of null values for relations when following
	query paths as proposed by Arjen.

	
2004-03-29 erik

	* Added support to qualifier parser to generate comparison
	qualifiers with not-equal operators.


2004-03-05 erik

	* Added a new PkInitializer that uses the standard system way
	to create a new GUID. To use, replace GuidPkInitializer in the
	templates with NewGuidPkInitializer.
	

2004-02-17 erik

	* Added support to specify the class that will be instantiated
	for a given entity. This can be done at runtime and is 
	intended to be used to mock entity classes. (Note that this
	feature is experimental and not part of the 1.1.1 release.)




RELEASE 1.1.1
----------------------------------------------------------------

2004-02-17 erik

	* Fixed bug which prevented reads of optional (nullable) to-one
	relations. This required adding two more entities to the model.
	

2004-02-12 erik

	* Fixed NEO-2 (Crasher when saving schema while using the XMLSPY
	plug-in.
	

2004-02-11 jim

	* Added the capability to add attributes (in the .NET sense) to 
	relationships.




RELEASE 1.1.0
----------------------------------------------------------------

2004-01-16 erik

        * Began refactoring of ObjectContext in order to make it smaller. 
        Some functionality regarding the object tables is now in 
        ObjectTable. This might affect custom subclasses of ObjectContext.

	* Also completed change from FindSingle to FindFirst and fixed 
	an error message in the GUID PK generator. An issue remains in 
	the latter, though.


2003-12-16 erikd

	* Changed the set of find methods on the factories. FindSingle
	must go and is replaced by FindFirst which does almost the same
	it doesn't raise if more than one is found but it uses fetch
	limits to stop the search once a matching object is found.


2003-12-05 erikd

	* Refactored the tools solution. We now have a set of interface/
	impl separated value objects to represent the ER model and the
	NorqueReader creates this. API also uses IList instead of arrays
	which introduces compatibility problems with existing templates.


2003-11-17 spike

	* Modified paramter generation for queries to allow for multiple
	occurances of the same column.


2003-11-10 erikd

	* Fixed entity map discovery algorithm: No longer load assemblies
	that are ignored.

	* Made required attribute available to template context.
	
	* Refactored test suite to allow for parallel testing of
	qualifiers against context and context with store.
	
	
2003-11-03 erikd

	* Added initial support for fetch limits.


2003-10-24 erikd

	* Refactored qualifier class hierarchy.
	
	* Added support for "query paths" and improved SQL generation for
	simple cross table lookups.


2003-09-03 erikd

	* Added method to context and entity object to retrieve all
	objects referencing a given object.


2003-08-20 bccryder

	* Added support for <unique> tag in xml file. To be used by
	velocity templates and SQL generation tools.
	

2003-08-28 erikd

	* Improved support for sorting lists in memory. Added a new
	comparer implementation that compares objects based on the
	values of a given property.
	

2003-08-20 erikd

	* Refactored property access in property qualifier to improve
	performance.
	
	* Refactored object tables in ObjectContext to improve
	performance.


2003-08-18 erikd

	* Fixed various bugs related to object/row states.
	
	* Removed SqlConnectionFactory concept; pooling is happening at
	a lower level anyway.


2003-08-12 erikd (proxy)

	* Added drop table generation capabilities.
	

2003-08-06 bccryder

    * Added method on entity object to reject changes.


2003-08-06 jimski3000

	* Added support to SqlDataStore for qualifiers spanning multiple
	tables.


2003-08-15 erikd (proxy)

    * Fixed two bugs which caused incorrect row states.
    

2003-08-01 erik

	* Modified code generator to create multiple create methods
	on factories for cases where a foreign key is (or is part of) 
	the primary key and multiple relations are defined for this  
	foreign key.
	

2003-07-30 jimski3000

    * Removed SqlConnectionFactory and moved connection handling
    into SqlDataStore.


2003-07-30 erikd

    * Created ObjectListBase, a subclass of collection base that
    is used as superclass for the generated lists. Moved some
    specific methods down to this new class.
    
    * Added Sort() method to ObjectListBase.
    
    * Added ToStringAllProperties() method to allow access to
    debug printing when ToString() is overridden.


2003-07-25 erikd

    * Added HasChanges() to EntityObject.


2003-07-18 erikd

	* Lists can be made read-only by calling MakeReadOnly().
	
	* Relations can return a read-only version of themselves. There
	is support in the templates to make this typesafe.
	
	* Fixed a longstanding bug. (Relations did not pick up changes
	to the dataset that are the result of merge operations.)


2003-07-15 erikd

	* Added new interface (IEntityObjectLifecycle) that is used
	to mark classes that want to receive messages about their 
	state in the lifecycle. Exact functionality to be determined
	but so far they will receive a SetupAfterCreate() just after
	they were created.
		

2003-07-10 erikd

	* Added capability to nest ObjectContexts, i.e. an ObjectContext
	now also implements IDataStore and can be used by a child 
	context to save changes. (Note that this change is not complete
	yet.) Needed to change IDataStore interface for this.
	
	* Added method to ObjectContext to locate a given object from
	another context in this context
	
	* Added method to EntityObject (IsSame) with which allows to
	compare objects from different contexts.
	

2003-07-08 erikd

	* Fixed bugs in the CodeGen adaptor. It now also creates
	user class files for new entities and properly closes all
	files when an exception is thrown.


2003-06-25 paul-h (proxy)

	* FindUnique() now throws more informative exception if no 
	matches are found


2003-06-23 paul-h (proxy)

    * Added check for DataRowState.Deleted in 
    ForeignColumnChanging handler. 


2003-06-23 paul-h (proxy)

    * Fixed problem with ObjectContext: The 'RowEvent' handler 
    was being hooked up to DataTables multiple times (once for 
    each instance of each EntityObject sub-type). It now hooks 
    the handler up only once. 

    * Fixed "Create-Delete-Create" bug: When EntityObjects were 
    deleted, their child ObjectRelations were left "dangling" 
    - their event handlers were still hooked up to events on 
    the Owner's DataTable, leading to 
    DataRowInaccessibleExceptions. EntityObjects now call 
    OwnerPendingDelete() on any child relations, allowing them 
    to unhook their event handlers.


2003-06-11 erikd

    * Several bugfixes regarding the creation, deletion and
    recreation of objects with user-defined primary keys.
    

2003-06-09 erikd

	* Fixed bug that ocurred when new child rows were deleted.


2003-06-05 erikd

    * Neo now has qualifiers. IFetchSpecification and its
    implementors were changed accordingly. Not that this
    change temporarily breaks SQL queries that span relations.
    
    * Changed command line tool flags. Rather than specifying
    what you do not want generated you specify what you want.


2003-06-02 erikd

	* Added processing instruction to CodeGen input files
	that specifies where to look for the template files.

	* Fixed GUID generation for cases where no IP address is
	available. A MAC address is always required, though.


2003-05-29 erikd

	* Fixed delete logic. (For objects that were just created
	it is wrong in order to delete them to reject their changes 
	because this will not fire a row delete event and hence not
	update the caching collection.)


2003-05-28 erikd

	* Improved CodeGen to better support entities with a 
	primary key that is made up of foreign key. It now creates
	a createObject factory methods that takes the related
	objects rather than the pk values.
	
	* Fixed 'find' methods to work with null values.
	
	* Fixed object context to forget objects when these are
	deleted.
	
	* Fixed object context to call rejectChanges rather than 
	delete on rows that are to be remove but still in added state.


2003-05-26 erikd

	* Refactored CodeGen to make it more flexible.

	* Added a new VsTool project that can generate a long file
	containing all support classes from within VS.NET, much
	like the dataset tool for xsd files. (It works already but
	at the moment the path to the templates is hardcoded.)


2003-05-21 erikd

	* Added 'find' methods to collection classes that help
	locating objects by property/value.


	* Renamed 'property' to 'attribute' in model reader and entity
	map to avoid confusion with actual c# 'properties' because
	schema relationships and schema attributes are realised as c#
	properties.

	* Change filenames for support classes to _Entity.cs to group
	them in VS.NET


2003-05-19 erikd

	* Restructured the tools solution. Pulled the model reader 
	classes out of the CodeGen project so that other projects
	that work on the model can use them without referencing the
	CodeGen project.
	
	* Improved the DefaultEntityMapFactory such that it finds the
	EntityMaps without a hint.
	
 
2003-05-15 erikd

	* Added the Tools solution to the source repository. All that is
	missing now is a tutorial...


2003-04-24 erikd

	* This SourceForge project is being recycled as the original neo
	project has merged with OpenNMS long ago. It is now used for NEO
	as in .NET EntityObjects. The code for the original project is
	preserved in the 'Attic' directories. ;-)



